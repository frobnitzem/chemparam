from lj_coef import *

mmff_symb = {
    1 : 'CR',
    2 : 'C=C',
    3 : 'C=O',
    4 : 'CSP',
    5 : 'HC',
    6 : 'OR',
    7 : 'O=C',
    8 : 'NR',
    9 : 'N=C',
    10 : 'NC=O',
    11 : 'F',
    12 : 'CL',
    13 : 'BR',
    14 : 'I',
    15 : 'S',
    16 : 'S=C',
    17 : 'SO',
    18 : 'SO2',
    19 : 'SI',
    20 : 'CR4R',
    21 : 'HOR',
    22 : 'CR3R',
    23 : 'HNR',
    24 : 'HOCO',
    25 : 'PO4',
    26 : 'P',
    27 : 'HN=C',
    28 : 'HNCO',
    29 : 'HOCC',
    30 : 'CE4R',
    31 : 'HOH',
    32 : 'O2CM',
    33 : 'HOS',
    34 : 'NR+',
    35 : 'OM',
    36 : 'HNR+',
    37 : 'CB',
    38 : 'NPYD',
    39 : 'NPYL',
    40 : 'NC=C',
    41 : 'CO2M',
    42 : 'NSP',
    43 : 'NSO2',
    44 : 'STHI',
    45 : 'NO2',
    46 : 'N=O',
    47 : 'NAZT',
    48 : 'NSO',
    49 : 'O+',
    50 : 'HO+',
    51 : 'O=+',
    52 : 'HO=+',
    53 : '=N=',
    54 : 'N+=C',
    55 : 'NCN+',
    56 : 'NGD+',
    57 : 'CNN+',
    58 : 'NPD+',
    59 : 'OFUR',
    60 : 'C%',
    61 : 'NR%',
    62 : 'NM',
    63 : 'C5A',
    64 : 'C5B',
    65 : 'N5A',
    66 : 'N5B',
    67 : 'N2OX',
    68 : 'N3OX',
    69 : 'NPOX',
    70 : 'OH2',
    71 : 'HS',
    72 : 'SM',
    73 : 'SMO2',
    74 : '=S=O',
    75 : 'P=C',
    76 : 'N5M',
    77 : 'CLO4',
    78 : 'C5',
    79 : 'N5',
    80 : 'CIM+',
    81 : 'NIM+',
    82 : 'N5OX',
    87 : 'FE+2',
    88 : 'FE+3',
    89 : 'F-',
    90 : 'CL-',
    91 : 'BR-',
    92 : 'LI+',
    93 : 'NA+',
    94 : 'K+',
    95 : 'ZN+2',
    96 : 'CA+2',
    97 : 'CU+1',
    98 : 'CU+2',
    99 : 'MG+2'
}

elems = dict([(tok[-1],int(tok[0])) for tok in map(str.split,
"""1  0.33  2.20  1.395  -0     -0    -0    H 
    3  1.34  0.97  -0     -0     -0    -0    Li
    4  0.90  1.47  -0     -0     -0    -0    Be
    5  0.81  2.01  -0     0.704  -0    -0    B 
    6  0.77  2.5   2.494  1.016  2.0   2.12  C 
    7  0.73  3.07  2.711  1.113  2.0   1.5   N 
    8  0.72  3.5   3.045  1.337  2.0   0.2   O 
    9  0.74  4.10  2.847  -0     -0    -0    F 
   11  1.54  1.01  -0     -0     -0    -0    Na
   12  1.30  1.23  -0     -0     -0    -0    Mg
   13  1.22  1.47  -0     -0     -0    -0    Al
   14  1.15  1.74  2.350  0.811  1.25  1.22  Si
   15  1.09  2.06  2.350  1.068  1.25  2.40  P 
   16  1.03  2.44  2.980  1.249  1.25  0.49  S 
   17  1.01  2.83  2.909  1.078  -0    -0    Cl
   19  1.96  0.91  -0     -0     -0    -0    K 
   20  1.74  1.04  -0     -0     -0    -0    Ca
   21  1.44  1.3   -0     -0     -0    -0    Sc
   22  1.36  1.5   -0     -0     -0    -0    Ti
   23  -0    1.6   -0     -0     -0    -0    V 
   24  -0    1.6   -0     -0     -0    -0    Cr
   25  -0    1.5   -0     -0     -0    -0    Mn
   26  -0    1.8   -0     -0     -0    -0    Fe
   27  -0    1.8   -0     -0     -0    -0    Co
   28  -0    1.8   -0     -0     -0    -0    Ni
   29  1.38  1.9   -0     -0     -0    -0    Cu
   30  1.31  1.6   -0     -0     -0    -0    Zn
   31  1.19  1.82  -0     -0     -0    -0    Ga
   32  1.20  2.02  -0     -0     -0    -0    Ge
   33  1.20  2.20  -0     0.825  -0    -0    As
   34  1.16  2.48  -0     -0     -0    -0    Se
   35  1.15  2.74  3.017  -0     -0    -0    Br
   37  2.11  0.89  -0     -0     -0    -0    Rb
   38  1.92  0.99  -0     -0     -0    -0    Sr
   39  1.62  1.3   -0     -0     -0    -0    Y 
   40  1.48  1.4   -0     -0     -0    -0    Zr
   41  -0    1.6   -0     -0     -0    -0    Nb
   42  -0    1.8   -0     -0     -0    -0    Mo
   43  -0    1.9   -0     -0     -0    -0    Tc
   44  -0    2.2   -0     -0     -0    -0    Ru
   45  -0    2.2   -0     -0     -0    -0    Rh
   46  -0    2.2   -0     -0     -0    -0    Pd
   47  1.53  1.9   -0     -0     -0    -0    Ag
   48  1.48  1.7   -0     -0     -0    -0    Cd
   49  1.46  1.49  -0     -0     -0    -0    In
   50  1.40  1.72  -0     -0     -0    -0    Sn
   51  1.41  1.82  -0     -0     -0    -0    Sb
   52  1.35  2.01  -0     -0     -0    -0    Te
   53  1.33  2.21  3.086  -0     -0    -0    I """.split('\n'))] )

def elem(t):
    if t[0] == '=':
        t = t[1:]
    if t[:3] == 'NIM' or t == 'NAZT':
        t = 'N'
    if t[:2] == 'CR' or t[:2] == 'CO':
        t = 'C'
    if len(t) == 1:
        return elems[t]
    k = t[0] + t[1].lower()
    if elems.has_key(k):
        return elems[k]
    return elems[t[0]]

mass = { 7:14.00674,	6:12.011,	8:15.9994, 
        9: 18.998,    11:22.990,  14: 28.085, 15: 30.974, \
                16:32.06,	1:1.00794, 35: 79.904,
                53: 126.90, 30: 65.38, 29: 63.546, 28: 58.693, \
                        26: 55.845, 3: 6.94, 20: 40.078, 12: 24.305, \
	17:35.453,     19:39.1 }

print """
[ atomtypes ]
; name  elem   mass    charge   ptype  sigma epsilon"""
for i in range(100):
    if not mmff_symb.has_key(i):
        continue
    t = mmff_symb[i]
    ind = dict([(int(tok[0]),v) for tok,v in zip(lines,anag)])
    I = ind[i]
    rij = c_double(0.0)
    eps = calc.compute_lr(I[0], I[1], I[2], I[3],
                          I[0], I[1], I[2], I[3],
                          I[4]+I[4], byref(rij))
    r = rij.value * 0.1*2**(-1/6.0)
    print "%-4s %3d  %10.5f  0.0       A    %8.6f %8.6f"%(\
                t, elem(t), mass[elem(t)], r, eps)

